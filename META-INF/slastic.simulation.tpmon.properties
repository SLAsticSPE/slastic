
# 1. Tpmon runtime properties
# Most likely, these have to be adapted to your demands!
# These properties affect the runtime behavior of tpmon,
# such as the data storage mode.

# 1.1 General tpmon properties

# 1.1.2 Run tpmon in debug mode
# In debug mode, tpmon is very verbose during runtime (default: false)
debug=false

# 1.1.3 Enable monitoring after startup (true/false)
# (you may want to turn it on later, e.g., using the control-servlet)
monitoringEnabled=true

# 1.1.4 Select the Monitoring Data Writer
# The value can be either one of the following constants, or a fully-qualified
# classname of a class (implementing kieker.tpmon.IMonitoringDataWriter) loaded
# dynamically during runtime (must be in the runtime classpath). Classes loaded by
# the classname are constructed by calling the default constructor followed by a
# call to the method init(String monitoringDataWriterInitString) with the
# value of the below-listed property monitoringDataWriterInitString.
# Existing constants are:
# -  SyncFS (Synchronous File System Writer as configured under Section 1.3 below)
# - AsyncFS (Asynchronous File System Writer as configured under Section 1.3 below)
# -  SyncDB (Synchronous Database Writer as configured under Section 1.3 below)
# - AsyncDB (Asynchronous Database Writer as configured under Section 1.3 below)
#monitoringDataWriter=kieker.tpmon.writer.jmsAsync.AsyncJMSConnector
#monitoringDataWriterInitString=jmsProviderUrl=tcp://localhost:3035/ | jmsTopic=queue1 | jmsContextFactoryType=org.exolab.jms.jndi.InitialContextFactory | jmsFactoryLookupName=ConnectionFactory | jmsMessageTimeToLive = 10000
#monitoringDataWriter=AsyncFS
#monitoringDataWriterInitString=
monitoringDataWriter=org.trustsoft.slastic.plugins.starter.kiekerNamedMonitoringPipe.PipeWriter
monitoringDataWriterInitString=pipeName=simulation0

# 1.1.5 Use monitoring record type IDs
# Monitoring records can be of different types (e.g., control flow, branches, etc.).
# In a monitoring run, each record type is registered and assigned an ID which 
# is unique for a monitoring run. In order to determine the type of a logged 
# monitoring record, the ID  useMonitoringRecordTypeIds 
# 
logMonitoringRecordTypeIds=true

# 1.1.6 Queue Size used to store Monitoring Records
# Asyncronous Writers need to store Monitoring Records in an internal Queue.
# This parameter defines the Number of Records cached. If this number is exceeded
# Kieker will terminate with a Queue Full Exception!
#
asyncRecordQueueSize=8000

# 1.2 Database configuration
# (only meaningful if monitoringDataWriter=AsyncDB, or =SyncDB)
 
# 1.2.1 Database driver and connection
# 1.2.1.1 Database driver (classname)
#         Examples: 
#          MySQL:   com.mysql.jdbc.Driver
dbDriverClassname=com.mysql.jdbc.Driver
# 1.2.1.2 Connection address
#         Provide meaningful values for HOSTNAME, DBNAME, DBUSER, DBPASS
#         Examples:
#          MySQL:   jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
#          DerbyDB: jdbc:derby:DBNAME;user=DBUSER;password=DBPASS
dbConnectionAddress=jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS

# 1.2.2 Name of the database table 
# (can be generated using the file table-for-monitoring.sql):
dbTableName=tpmondata

# 1.2.3 Other database setting (usually you don't touch these)
# Check the database for the last experiment id and increase it by 1 (true/false)
setInitialExperimentIdBasedOnLastId=true
 
# 1.3 File system storage mode

# 1.3.1 Where to store monitoring data:
# There are two ways to configure the data storage folder: 
# a. Write into files (tpmon-[..].dat) into java.io.tmpdir (on UNIX e.g. /tmp, on Windows C:\Docum...\Temp) (default)
# b. Monitoring data will be stored in the [customStoragePath] if storeInJavaIoTmpdir is set to false
# 
# The following two properties may be overwritten via java command line parameters 
# (java -Dtpmon.storeInJavaIoTmpdir=false -Dtpmon.customStoragePath=/var/log/)

# 1.3.1.a Use the system's default temporary folder (true/false)
tpmon.storeInJavaIoTmpdir=true

# 1.3.1.b Use this custom storage folder
# e.g. /var/tpmon/ or "C:\tpmonData\" (ensure the folder exists)
tpmon.customStoragePath=/tmp/
 
# 2. Tpmon build properties (no changes required)

# 2.1 Use debugging functionality of the jvm (true/false)
tpmon.javac.debug=false
