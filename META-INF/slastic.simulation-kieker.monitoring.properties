## In order to use a custom Kieker.Monitoring configuration, create a copy of 
## this file and modify it according to your needs. 
##
## The location of the file is passed to Kieker.Monitoring via the JVM parameter
## kieker.monitoring.properties. For example, with a configuration file named 
## my.kieker.monitoring.properties you would pass this location to the JVM when 
## starting your application:
##
##  java -Dkieker.monitoring.properties=my.kieker.monitoring.properties [...]
##
## If no configuration file is passed, a default configuration is being used 
## according to the values in this default file.

# Enable/disable debug mode (true|false, default; false) 
# Debug mode provides a more verbose logging output. It should not be used in 
# in production.
debug=false

# Enable/disable monitoring after startup (true|false; default: true)
# If monitoring is disabled, the MonitoringController simply drops incoming 
# monitoring records. Thus, they are not passed the monitoring log writer.
# Monitoring probes may also change their behavior depending on the value of 
# this property.
monitoringEnabled=true

# Selection of monitoring data writer (classname or identifier constant; MUST BE SET)
# The value can either be one of the following constants, or a fully-qualified
# classname of a class implementing kieker.monitoring.IMonitoringDataWriter. 
# Writers loaded by their classname are constructed by calling the default
# constructor followed by a call to the method init(String) with the value of 
# the below-listed property monitoringDataWriterInitString. If a custom monitoring 
# log writer is used, make sure that the class is in the classpath.
#
# Available identifier constants are (configured via additional properties below)
# -  SyncFS (Synchronous File System Writer)
# - AsyncFS (Asynchronous File System Writer) 
# -  SyncDB (Synchronous Database Writer)
# - AsyncDB (Asynchronous Database Writer)
#
# Example to use the JMS writer to write to a Java Messaging Queue:
# monitoringDataWriter=kieker.monitoring.writer.jms.AsyncJMSWriter
# monitoringDataWriterInitString=jmsProviderUrl=tcp://localhost:3035/ | jmsTopic=queue1 | jmsContextFactoryType=org.exolab.jms.jndi.InitialContextFactory | jmsFactoryLookupName=ConnectionFactory | jmsMessageTimeToLive = 10000
monitoringDataWriter=AsyncFS
monitoringDataWriterInitString=

# Buffer size used by the asynchronous monitoring log writers AsyncFS and AsyncDB
# Asyncronous writers need to store monitoring records in an internal buffer.
# This parameter defines its capacity in terms of the number of records. 
# If this number is exceeded, Kieker.Monitoring will terminate with a QueueFullException!
asyncRecordQueueSize=8000
# Behavior the asynchronous writer when the internal queue is full:
# If set to 'false' (default), the writer reports an error and monitoring terminates
# If set to 'true', the writer blocks until queue capacity is available. 
#  Be careful when using the value 'true' since then, the asynchronous writer
#  is no longer decoupled from the monitored application.
asyncBlockOnFullQueue=true

##
# The following two properties are only relevant if SyncFS and AsyncFS are 
# specified as the value of the property monitoringDataWriter defined above.
#
# Monitoring data is either written to the default temporary directory 
# (java.io.tmpdir: /tmp/ under UNIX-based systems, and C:\Docum...\Temp under Windows)
# or to a custom directory. By default, the default temporary directory is being used.
#
#  These two properties can be overwritten via JVM parameters, e.g., 
#  (java -Dkieker.monitoring.storeInJavaIoTmpdir=false
#        -Dkieker.monitoring.customStoragePath=/var/log/)
# 
# In order to use the default temporary directory, set the property value of
# kieker.monitoring.storeInJavaIoTmpdir to true:
kieker.monitoring.storeInJavaIoTmpdir=true
# In order to use a custom directory, set kieker.monitoring.storeInJavaIoTmpdir=false
# and set kieker.monitoring.customStoragePath as desired. Examples:
# /var/tpmon/ or "C:\tpmonData\" (ensure the folder exists).
#kieker.monitoring.customStoragePath=/var/tpmon/
#

##
# The following properties set the database driver and connection details. 
# They are only relevant if SyncDB or AsyncDB are specified as the value of the 
# property monitoringDataWriter defined above.
#
# - Database driver classname
#   Examples: MySQL:   com.mysql.jdbc.Driver
dbDriverClassname=com.mysql.jdbc.Driver
# - Connection string
#   Examples:
#          MySQL:   jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
#          DerbyDB: jdbc:derby:DBNAME;user=DBUSER;password=DBPASS
dbConnectionAddress=jdbc:mysql://HOSTNAME/DBNAME?user=DBUSER&password=DBPASS
# - Name of the database table 
#   (can be generated using the file table-for-monitoring.sql):
dbTableName=tpmondata
# - Check the database for the last experiment id and increase it by 1 (true/false)
setInitialExperimentIdBasedOnLastId=true
