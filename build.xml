<?xml version="1.0" encoding="UTF-8"?>
<project name="SLAstic" default="build-all" basedir=".">
    <property file="build.properties"/>
    <property file="examples.properties"/>

    <!--<path id="classpath.libs">
        <pathelement path="${classpath}"/>
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="."/>
    </path>-->

    <target name="init-version">
        <tstamp/>
        <!-- Names of the slastic runtime libraries that will be created
             by the build process: -->
        <property name="slastic.version"
                  value="0.01a"/>
        <property name="slastic.core.jar"
                  value="${slastic.core.packagenamebase}-${slastic.version}.jar"/>
        <property name="slastic.simulation.jar"
                  value="${slastic.simulation.packagenamebase}-${slastic.version}.jar"/>
        <property name="slastic.plugins.jar"
                  value="${slastic.plugins.packagenamebase}-${slastic.version}.jar"/>
    </target>

    <target name="update-version" unless="version.noupdate"
            depends="init-version">
        <echo>Updating version string</echo>
        <replaceregexp file="src/core/org/trustsoft/slastic/common/Version.java"
                       match="VERSION = &quot;.*?&quot;"
                       replace="VERSION = &quot;${slastic.version}-${DSTAMP}&quot;"/>
        <replaceregexp match="&lt;version&gt;.*?&lt;/version&gt;"
                       replace="&lt;version&gt;${slastic.version}-${DSTAMP}&lt;/version&gt;">
            <fileset dir=".">
                <include name="pom_ant_slastic*.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- Compile classpaths used for javac and javadoc -->
    <target name="init-compile-classpaths">
        <path id="slastic.core-compile-classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="slastic.plugins-compile-classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="${slastic.core.jar}"/>
                <include name="${slastic.simulation.jar}"/>
            </fileset>
        </path>
        <path id="slastic.simulation-compile-classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="${slastic.core.jar}"/>
            </fileset>
        </path>
        <path id="slastic.tests-compile-classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="${slastic.core.jar}"/>
                <include name="${slastic.plugins.jar}"/>
                <include name="${slastic.simulation.jar}"/>
            </fileset>
        </path>
       <path id="slastic.tests-run-classpath">
            <fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${dist.dir}">
                <include name="${slastic.core.jar}"/>
                <include name="${slastic.plugins.jar}"/>
                <include name="${slastic.simulation.jar}"/>
            </fileset>
            <pathelement location="${build.tests.dir}/"/>
        </path>
    </target>

    <target name="build-all"
            depends="clean,init,build-slastic.core,build-slastic.simulation,build-slastic.plugins">
    </target>

    <condition property="no.slastic.framework.properties">
        <not>
            <available file="${slastic.monitoring.properties}"/>
        </not>
    </condition>

    <target name="init-slastic.framework.properties" if="no.slastic.framework.properties">
        <!-- if no slastic.framework.properties, copy example file automatically  -->
        <echo message="${slastic.framework.properties} not existing.
              Creating default file."/>
        <copy file="${slastic.framework.properties.example}" tofile="${slastic.framework.properties}"/>
    </target>

    <condition property="no.slastic.simulation.properties">
        <not>
            <available file="${slastic.simulation.properties}"/>
        </not>
    </condition>

    <target name="init-slastic.simulation-properties" if="no.slastic.simulation.properties">
        <!-- if no slastic.simulation.properties, copy example file automatically  -->
        <echo message="${slastic.simulation.properties} not existing.
              Creating default file."/>
        <copy file="${slastic.simulation.properties.example}" tofile="${slastic.simulation.properties}"/>
    </target>

    <target name="init" depends="update-version,init-compile-classpaths,init-slastic.framework.properties,init-slastic.simulation-properties">
        <!-- Register special aspectJ commands in ant - allow ant to use special AspectJ commands: -->
        <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" classpath="${aspectjtoolsjar}"/>
        <fail message="Critical error: AspectJ library not found
              in ${aspectjtoolsjar}.
              Check your build.properties.">
            <condition>
                <not>
                    <available file="${aspectjtoolsjar}"/>
                </not>
            </condition>
        </fail>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${build.tests.dir}"/>
        <mkdir dir="tmp"/>
    </target>

    <target name="build-slastic.core" depends="init">
        <delete dir="${build.slastic.core.dir}"/>
        <mkdir  dir="${build.slastic.core.dir}"/>
        <mkdir  dir="${build.slastic.core.dir}/META-INF"/>
        <javac destDir="${build.slastic.core.dir}"
               source="1.5"
               srcdir="src/core"
               debug="true"
               classpathref="slastic.core-compile-classpath">
            <compilerarg value="-Xlint:-path"/>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.slastic.core.dir}/">
            <fileset dir="src/core">
                <include name="org/trustsoft/slastic/core/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${slastic.core.jar}">
            <fileset dir="${build.slastic.core.dir}"/>
        </jar>
    </target>

    <target name="build-slastic.plugins" depends="init,build-slastic.core,build-slastic.simulation">
        <delete dir="${build.slastic.plugins.dir}"/>
        <mkdir  dir="${build.slastic.plugins.dir}"/>
        <mkdir  dir="${build.slastic.plugins.dir}/META-INF"/>
        <javac destDir="${build.slastic.plugins.dir}"
               source="1.5"
               srcdir="src/plugins"
               debug="true"
               classpathref="slastic.plugins-compile-classpath">
            <compilerarg value="-Xlint:-path"/>
        </javac>
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.slastic.plugins.dir}/">
            <fileset dir="src/plugins">
                <include name="org/trustsoft/slastic/plugins/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${slastic.plugins.jar}">
            <fileset dir="${build.slastic.plugins.dir}"/>
        </jar>
    </target>

    <target name="build-slastic.simulation" depends="init,build-slastic.core">
        <delete dir="${build.slastic.simulation.dir}"/>
        <mkdir  dir="${build.slastic.simulation.dir}"/>
        <mkdir  dir="${build.slastic.simulation.dir}/META-INF"/>
        <javac destDir="${build.slastic.simulation.dir}"
               source="1.5"
               srcdir="src/simulation"
               debug="true"
               classpathref="slastic.simulation-compile-classpath">
            <compilerarg value="-Xlint:-path"/>
        </javac>
        <!--<copy file="${slastic.simulation.properties}" todir="${build.slastic.simulation.dir}/META-INF"/>-->
        <!-- We want to include the sources in this jar -->
        <copy todir="${build.slastic.simulation.dir}/">
            <fileset dir="src/simulation">
                <include name="org/trustsoft/slastic/simulation/**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist.dir}/${slastic.simulation.jar}">
            <fileset dir="${build.slastic.simulation.dir}"/>
        </jar>
    </target>

    <condition property="no.log4j.properties.tests">
        <not>
            <available file="${tests.log4j.properties}"/>
        </not>
    </condition>

    <target name="init-log4-properties-tests" if="no.log4j.properties.tests">
        <!-- if no aop.xml, copy example file automatically  -->
        <echo message="${no.log4j.properties.tests} not existing.
              Creating default file."/>
        <copy file="${log4j.properties.example}" tofile="${tests.log4j.properties}"/>
    </target>

    <target name="run-SLAsticStarter-simulation" depends="build-slastic.core,build-slastic.plugins,init-log4-properties-tests">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
        <java dir="."
              fork="true"
              classname="org.trustsoft.slastic.plugins.starter.SLAsticStarter"
              classpathref="slastic.core.classpath"
              maxmemory="1024m">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.configuration=${slastic.simulation.tpmon.properties}"/>
            <arg line="--start-framework META-INF/slastic.framework.properties"/>
            <arg line="--start-simulation META-INF/slastic.simulation.properties"/>
            <classpath>
                <pathelement location="${dist.dir}/${slastic.plugins.jar}"/>
                <pathelement location="${dist.dir}/${slastic.simulation.jar}"/>
            </classpath>
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>

    <target name="run-SLAsticStarter" depends="build-slastic.core,build-slastic.plugins,init-log4-properties-tests">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
        <java dir="."
              fork="true"
              classname="org.trustsoft.slastic.plugins.starter.SLAsticStarter"
              classpathref="slastic.core.classpath"
              maxmemory="1024m">
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.configuration=${slastic.simulation.tpmon.properties}"/>
            <arg line="--start-framework META-INF/slastic.framework.properties"/>
            <classpath>
                <pathelement location="${dist.dir}/${slastic.plugins.jar}"/>
                <pathelement location="${dist.dir}/${slastic.simulation.jar}"/>
            </classpath>
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>

    <target name="run-rTest" depends="build-slastic.core,build-slastic.plugins,init-log4-properties-tests">
        <copy file="${tests.log4j.properties}" tofile="${build.dir}/tests.log4j.properties"/>
        <java dir="."
              fork="true"
              classname="org.trustsoft.slastic.plugins.util.REngineFacade"
              classpathref="slastic.core.classpath"
              maxmemory="1024m">
            <jvmarg value="-Djava.library.path=lib/"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dtpmon.configuration=${slastic.simulation.tpmon.properties}"/>
            <arg line="--start-framework META-INF/slastic.framework.properties"/>
            <classpath>
                <pathelement location="${dist.dir}/${slastic.plugins.jar}"/>
                <pathelement location="${dist.dir}/${slastic.simulation.jar}"/>
            </classpath>
        </java>
        <delete file="${build.tests.dir}/log4j.properties"/>
    </target>

    <condition property="no.log4j.properties.tests">
        <not>
            <available file="${tests.log4j.properties}"/>
        </not>
    </condition>

    <target name="compile-tests-loadTimeWeavingDifferentRecordTypes"
            depends="build-slastic.core,build-slastic.plugins,init-log4-properties-tests">
        <javac source="1.5"
               destDir="${build.tests.dir}"
               classpathref="slastic.tests-compile-classpath"
               srcdir="tests/org/trustsoft/slastic/tests/bookstoreDifferentRecordTypes">
        </javac>
    </target>

    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

    <target name="run-tests-junit"> <!-- depends="compile-all-tests"-->
        <path id="kieker.test-junit-run-classpath">
            <fileset dir="${lib.dir}">
                <include name="commons-logging-*.jar"/>
                <include name="junit-*.jar"/>
            </fileset>
            <pathelement location="${build.tests.dir}/"/>
            <fileset dir="${dist.dir}">
                <include name="${dist.kieker.common.jar}"/>
                <include name="${dist.kieker.monitoring.jar}"/>
                <include name="${dist.kieker.analysis.jar}"/>
                <include name="${dist.kieker.tools.jar}"/>
            </fileset>
        </path>

        <delete dir="${tests.junit-results.dir}"/>
        <mkdir  dir="${tests.junit-results.dir}"/>

        <junit printsummary="yes" haltonfailure="no">
            <classpath refid="kieker.test-junit-run-classpath"/>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${tests.junit-results.dir}">
                <fileset dir="${build.tests.dir}/">
                    <include name="**/junit/**/*Test*.class"/>
                    <exclude name="**/*$*.class"/>
                </fileset>
            </batchtest>
        </junit>

        <antcall target="test.junit.report"/>
    </target>

    <target name="run-tests-loadTimeWeaving-bookstoreDifferentRecordTypes"
            depends="compile-tests-loadTimeWeavingDifferentRecordTypes">
        <copy file="${tests.log4j.properties}"
              tofile="${build.dir}/tests.log4j.properties"/>
        <copy file="${aop.xml.ltwtests}"
              tofile="${build.tests.dir}/META-INF/aop.xml"/>
        <java dir="."
              fork="true"
              classname="org.trustsoft.slastic.tests.bookstoreDifferentRecordTypes.Bookstore"
              classpathref="slastic.tests-run-classpath">
            <jvmarg value="-Dtpmon.configuration=${tests.tpmon.properties}"/>
            <jvmarg value="-Dtpmon.storeInJavaIoTmpdir=${tests.storeInJavaIoTmpdir}"/>
            <jvmarg value="-Dtpmon.customStoragePath=${tests.logdata.storagepath}"/>
            <jvmarg value="-javaagent:${aspectjweaverjar}"/>
            <jvmarg value="-Dlog4j.configuration=${build.dir}/tests.log4j.properties"/>
            <jvmarg value="-Dorg.aspectj.weaver.showWeaveInfo=true"/>
            <jvmarg value="-Daj.weaving.verbose=true"/>
            <classpath>
                <pathelement location="${dist.dir}/${slastic.core.jar}"/>
                <pathelement location="${dist.dir}/${slastic.plugins.jar}"/>
            </classpath>
        </java>
    </target>

    <target name="clean">
        <!-- <delete dir="tmp"/>-->
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>
</project>
